
#include <iostream>
#include <WS2tcpip.h>
#include <windows.h>


using namespace std;


#pragma comment (lib, "ws2_32.lib")

char* buf;

char* chave;



DWORD WINAPI Letra_0_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('0');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_0_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('0');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_1_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('1');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}


DWORD WINAPI Letra_1_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('1');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}




DWORD WINAPI Letra_2_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('2');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_2_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('2');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_3_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('3');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_3_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('3');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_4_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('4');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_4_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('4');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_5_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('5');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_5_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('5');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_6_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('6');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_6_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('6');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_7_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('7');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_7_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('7');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_8_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('8');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_8_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('8');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_9_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('9');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_9_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('9');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

//=============================================================================================
//  LETRAS
//=============================================================================================
DWORD WINAPI Letra_a_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('a');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_a_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('a');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_b_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('b');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_b_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('b');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_c_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('c');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_c_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('c');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_d_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('d');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_d_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('d');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}
DWORD WINAPI Letra_e_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('e');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_e_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('e');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_f_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('f');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_f_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('f');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_g_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('g');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_g_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('g');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_h_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('h');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_h_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('h');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_l_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('l');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_l_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('l');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_m_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('m');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_m_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('m');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_n_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('n');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_n_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('n');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_o_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('o');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_o_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('o');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_p_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('p');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_p_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('p');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_q_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('q');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_q_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('q');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}
DWORD WINAPI Letra_i_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('i');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_i_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('i');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}
DWORD WINAPI Letra_j_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('j');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_j_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('j');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_k_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('k');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_k_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('k');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_r_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('r');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_r_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('r');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_s_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('s');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_s_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('s');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_t_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('t');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_t_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('t');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_u_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('u');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_u_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('u');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_v_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('v');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_v_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('v');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}


DWORD WINAPI Letra_w_donw(void* data) {
	
		SHORT key;
		UINT mappedkey;
		//In a loop.
		INPUT input = { 0 };
		key = VkKeyScan('W');
		//Simulating the i key.
		mappedkey = MapVirtualKey(LOBYTE(key), 0);

		input.type = INPUT_KEYBOARD;

		input.ki.dwFlags = KEYEVENTF_SCANCODE;

		input.ki.wScan = mappedkey;

		SendInput(1, &input, sizeof(input)); 
	
		

	return 0;
}


DWORD WINAPI Letra_w_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('W');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_x_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('x');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_x_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('x');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_y_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('y');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_y_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('y');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_z_donw(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('z');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}

DWORD WINAPI Letra_z_up(void* data) {

	SHORT key;
	UINT mappedkey;
	//In a loop.
	INPUT input = { 0 };
	key = VkKeyScan('z');
	//Simulating the i key.
	mappedkey = MapVirtualKey(LOBYTE(key), 0);

	input.type = INPUT_KEYBOARD;

	input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	input.ki.wScan = mappedkey;

	SendInput(1, &input, sizeof(input));



	return 0;
}


// Main entry point into the server
int main()
{
	//	HANDLE thread = CreateThread(NULL, 0, ThreadFunc, NULL, 0, NULL);
		////////////////////////////////////////////////////////////
		// INITIALIZE WINSOCK
		////////////////////////////////////////////////////////////

		// Structure to store the WinSock version. This is filled in
		// on the call to WSAStartup()
	WSADATA data;

	// To start WinSock, the required version must be passed to
	// WSAStartup(). This server is going to use WinSock version
	// 2 so I create a word that will store 2 and 2 in hex i.e.
	// 0x0202
	WORD version = MAKEWORD(2, 2);

	// Start WinSock
	int wsOk = WSAStartup(version, &data);
	if (wsOk != 0)
	{
		// Not ok! Get out quickly
		cout << "Can't start Winsock! " << wsOk;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// SOCKET CREATION AND BINDING
	////////////////////////////////////////////////////////////

	// Create a socket, notice that it is a user datagram socket (UDP)
	SOCKET in = socket(AF_INET, SOCK_DGRAM, 0);

	// Create a server hint structure for the server
	sockaddr_in serverHint;
	serverHint.sin_addr.S_un.S_addr = ADDR_ANY; // Us any IP address available on the machine
	serverHint.sin_family = AF_INET; // Address format is IPv4
	serverHint.sin_port = htons(54000); // Convert from little to big endian

	// Try and bind the socket to the IP and port
	if (bind(in, (sockaddr*)&serverHint, sizeof(serverHint)) == SOCKET_ERROR)
	{
		cout << "Can't bind socket! " << WSAGetLastError() << endl;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// MAIN LOOP SETUP AND ENTRY
	////////////////////////////////////////////////////////////

	sockaddr_in client; // Use to hold the client information (port / ip address)
	int clientLength = sizeof(client); // The size of the client information
	buf = (char*)malloc(64 * sizeof(char));
	chave = (char*)malloc(64 * sizeof(char));
	for (int dado1000 = 0; dado1000 != 60; dado1000++) { chave[dado1000] = 0; }
	//	string s = "asdasd";
	//	int sendOk = sendto(in, s.c_str(), s.size() + 1, 0, (sockaddr*)&client, sizeof(client));

		// Enter a loop
	while (true)
	{
		ZeroMemory(&client, clientLength); // Clear the client structure
		ZeroMemory(buf, 64); // Clear the receive buffer
	//	cout << "a espera .." << endl;
		// Wait for message
		int bytesIn = recvfrom(in, buf, 64, 0, (sockaddr*)&client, &clientLength);
		if (bytesIn == SOCKET_ERROR)
		{
			cout << "Error receiving from client " << WSAGetLastError() << endl;
			continue;
		}
		//=========================================================================================================
		//        VERIFICA QUAIS TECLAS ESTÃO UP E DONW
		//=========================================================================================================
				// 0
		if (buf[0] == 1) { if (chave[0] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_0_donw, NULL, 0, NULL); chave[0] = 1; } }
		else { if (chave[0] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_0_up, NULL, 0, NULL); chave[0] = 0; } }
		// 1
		if (buf[1] == 1) { if (chave[1] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_1_donw, NULL, 0, NULL); chave[1] = 1; } }
		else { if (chave[1] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_1_up, NULL, 0, NULL); chave[1] = 0; } }
		// 2
		if (buf[2] == 1) { if (chave[2] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_2_donw, NULL, 0, NULL); chave[2] = 1; } }
		else { if (chave[2] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_2_up, NULL, 0, NULL); chave[2] = 0; } }
		// 3
		if (buf[3] == 1) { if (chave[3] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_3_donw, NULL, 0, NULL); chave[3] = 1; } }
		else { if (chave[3] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_3_up, NULL, 0, NULL); chave[3] = 0; } }
		// 4
		if (buf[4] == 1) { if (chave[4] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_4_donw, NULL, 0, NULL); chave[4] = 1; } }
		else { if (chave[4] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_4_up, NULL, 0, NULL); chave[4] = 0; } }
		// 5
		if (buf[5] == 1) { if (chave[5] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_5_donw, NULL, 0, NULL); chave[5] = 1; } }
		else { if (chave[5] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_5_up, NULL, 0, NULL); chave[5] = 0; } }
		// 6
		if (buf[6] == 1) { if (chave[6] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_6_donw, NULL, 0, NULL); chave[6] = 1; } }
		else { if (chave[6] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_6_up, NULL, 0, NULL); chave[6] = 0; } }
		// 7
		if (buf[7] == 1) { if (chave[7] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_7_donw, NULL, 0, NULL); chave[7] = 1; } }
		else { if (chave[7] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_7_up, NULL, 0, NULL); chave[7] = 0; } }
		// 8
		if (buf[8] == 1) { if (chave[8] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_8_donw, NULL, 0, NULL); chave[8] = 1; } }
		else { if (chave[8] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_8_up, NULL, 0, NULL); chave[8] = 0; } }
		// 9
		if (buf[9] == 1) { if (chave[9] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_9_donw, NULL, 0, NULL); chave[9] = 1; } }
		else { if (chave[9] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_9_up, NULL, 0, NULL); chave[9] = 0; } }
		// A 
		if (buf[10] == 1) { if (chave[10] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_a_donw, NULL, 0, NULL); chave[10] = 1; } }
		else { if (chave[10] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_a_up, NULL, 0, NULL); chave[10] = 0; } }
		// B
		if (buf[11] == 1) { if (chave[11] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_b_donw, NULL, 0, NULL); chave[11] = 1; } }
		else { if (chave[11] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_b_up, NULL, 0, NULL); chave[11] = 0; } }
		// C
		if (buf[12] == 1) { if (chave[12] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_c_donw, NULL, 0, NULL); chave[12] = 1; } }
		else { if (chave[12] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_c_up, NULL, 0, NULL); chave[12] = 0; } }
		// D
		if (buf[13] == 1) { if (chave[13] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_d_donw, NULL, 0, NULL); chave[13] = 1; } }
		else { if (chave[13] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_d_up, NULL, 0, NULL); chave[13] = 0; } }
		// E
		if (buf[14] == 1) { if (chave[14] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_e_donw, NULL, 0, NULL); chave[14] = 1; } }
		else { if (chave[14] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_e_up, NULL, 0, NULL); chave[14] = 0; } }
		// F
		if (buf[15] == 1) { if (chave[15] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_f_donw, NULL, 0, NULL); chave[15] = 1; } }
		else { if (chave[15] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_f_up, NULL, 0, NULL); chave[15] = 0; } }
		// G
		if (buf[16] == 1) { if (chave[16] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_g_donw, NULL, 0, NULL); chave[16] = 1; } }
		else { if (chave[16] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_g_up, NULL, 0, NULL); chave[16] = 0; } }
		// H
		if (buf[17] == 1) { if (chave[17] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_h_donw, NULL, 0, NULL); chave[17] = 1; } }
		else { if (chave[17] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_h_up, NULL, 0, NULL); chave[17] = 0; } }
		// I
		if (buf[18] == 1) { if (chave[18] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_i_donw, NULL, 0, NULL); chave[18] = 1; } }
		else { if (chave[18] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_i_up, NULL, 0, NULL); chave[18] = 0; } }
		// J
		if (buf[19] == 1) { if (chave[19] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_j_donw, NULL, 0, NULL); chave[19] = 1; } }
		else { if (chave[19] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_j_up, NULL, 0, NULL); chave[19] = 0; } }
		// K
		if (buf[20] == 1) { if (chave[20] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_k_donw, NULL, 0, NULL); chave[20] = 1; } }
		else { if (chave[20] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_k_up, NULL, 0, NULL); chave[20] = 0; } }
		// L
		if (buf[21] == 1) { if (chave[21] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_l_donw, NULL, 0, NULL); chave[21] = 1; } }
		else { if (chave[21] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_l_up, NULL, 0, NULL); chave[21] = 0; } }
		// M
		if (buf[22] == 1) { if (chave[22] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_m_donw, NULL, 0, NULL); chave[22] = 1; } }
		else { if (chave[22] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_m_up, NULL, 0, NULL); chave[22] = 0; } }
		// N
		if (buf[23] == 1) { if (chave[23] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_n_donw, NULL, 0, NULL); chave[23] = 1; } }
		else { if (chave[23] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_n_up, NULL, 0, NULL); chave[23] = 0; } }
		// O
		if (buf[24] == 1) { if (chave[24] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_o_donw, NULL, 0, NULL); chave[24] = 1; } }
		else { if (chave[24] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_o_up, NULL, 0, NULL); chave[24] = 0; } }
		// P
		if (buf[25] == 1) { if (chave[25] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_p_donw, NULL, 0, NULL); chave[25] = 1; } }
		else { if (chave[25] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_p_up, NULL, 0, NULL); chave[25] = 0; } }
		// Q
		if (buf[26] == 1) { if (chave[26] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_q_donw, NULL, 0, NULL); chave[26] = 1; } }
		else { if (chave[26] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_q_up, NULL, 0, NULL); chave[26] = 0; } }
		// R
		if (buf[27] == 1) { if (chave[27] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_r_donw, NULL, 0, NULL); chave[27] = 1; } }
		else { if (chave[27] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_r_up, NULL, 0, NULL); chave[27] = 0; } }
		// S
		if (buf[28] == 1) { if (chave[28] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_s_donw, NULL, 0, NULL); chave[28] = 1; } }
		else { if (chave[28] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_s_up, NULL, 0, NULL); chave[28] = 0; } }
		// T
		if (buf[29] == 1) { if (chave[29] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_t_donw, NULL, 0, NULL); chave[29] = 1; } }
		else { if (chave[29] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_t_up, NULL, 0, NULL); chave[29] = 0; } }
		// U
		if (buf[30] == 1) { if (chave[30] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_u_donw, NULL, 0, NULL); chave[30] = 1; } }
		else { if (chave[30] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_u_up, NULL, 0, NULL); chave[30] = 0; } }
		// V
		if (buf[31] == 1) { if (chave[31] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_v_donw, NULL, 0, NULL); chave[31] = 1; } }
		else { if (chave[31] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_v_up, NULL, 0, NULL); chave[31] = 0; } }
		// W
		if (buf[32] == 1) { if (chave[32] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_w_donw, NULL, 0, NULL); chave[32] = 1; } }
		else { if (chave[32] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_w_up, NULL, 0, NULL); chave[32] = 0; } }
		// X
		if (buf[33] == 1) { if (chave[33] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_x_donw, NULL, 0, NULL); chave[33] = 1; } }
		else { if (chave[33] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_x_up, NULL, 0, NULL); chave[33] = 0; } }
		// Y
		if (buf[34] == 1) { if (chave[34] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_y_donw, NULL, 0, NULL); chave[34] = 1; } }
		else { if (chave[34] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_y_up, NULL, 0, NULL); chave[34] = 0; } }
		// Z
		if (buf[35] == 1) { if (chave[35] == 0) { HANDLE thread = CreateThread(NULL, 0, Letra_z_donw, NULL, 0, NULL); chave[35] = 1; } }
		else { if (chave[35] == 1) { HANDLE thread = CreateThread(NULL, 0, Letra_z_up, NULL, 0, NULL); chave[35] = 0; } }
		// shift
		if (buf[36] == 1) { if (chave[36] == 0) { keybd_event(0x10, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[36] = 1; } }
		else { if (chave[36] == 1) { keybd_event(0x10, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[36] = 0; } }
		// control 
		if (buf[37] == 1) { if (chave[37] == 0) { keybd_event(0x11, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[37] = 1; } }
		else { if (chave[37] == 1) { keybd_event(0x11, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[37] = 0; } }
		// spaço
		if (buf[38] == 1) { if (chave[38] == 0) { keybd_event(0x20, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[38] = 1; } }
		else { if (chave[38] == 1) { keybd_event(0x20, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[38] = 0; } }
		// backspace
		if (buf[39] == 1) { if (chave[39] == 0) { keybd_event(0x08, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[39] = 1; } }
		else { if (chave[39] == 1) { keybd_event(0x08, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[39] = 0; } }
		// esc
		if (buf[40] == 1) { if (chave[40] == 0) { keybd_event(0x1B, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[40] = 1; } }
		else { if (chave[40] == 1) { keybd_event(0x1B, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[40] = 0; } }
		// enter 
		if (buf[41] == 1) { if (chave[41] == 0) { keybd_event(0x0D, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[41] = 1; } }
		else { if (chave[41] == 1) { keybd_event(0x0D, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[41] = 0; } }
		// mause esquerdo
		if (buf[42] == 1) { if (chave[42] == 0) { keybd_event(0x01, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[42] = 1; } }
		else { if (chave[42] == 1) { keybd_event(0x01, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[42] = 0; } }
		// mause direita 
		if (buf[43] == 1) { if (chave[43] == 0) { keybd_event(0x02, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); chave[43] = 1; } }
		else { if (chave[43] == 1) { keybd_event(0x02, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); chave[43] = 0; } }

	}

	// Close socket
	closesocket(in);

	// Shutdown winsock
	WSACleanup();





}