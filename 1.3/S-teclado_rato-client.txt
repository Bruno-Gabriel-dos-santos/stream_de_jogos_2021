
#include <iostream>
#include <WS2tcpip.h>
#include <Windows.h>
// Include the Winsock library (lib) file
#pragma comment (lib, "ws2_32.lib")

// Saves us from typing std::cout << etc. etc. etc.
using namespace std;

void main() // We can pass in a command line option!! 
{
	////////////////////////////////////////////////////////////
	// INITIALIZE WINSOCK
	////////////////////////////////////////////////////////////

	// Structure to store the WinSock version. This is filled in
	// on the call to WSAStartup()
	WSADATA data;

	// To start WinSock, the required version must be passed to
	// WSAStartup(). This server is going to use WinSock version
	// 2 so I create a word that will store 2 and 2 in hex i.e.
	// 0x0202
	WORD version = MAKEWORD(2, 2);

	// Start WinSock
	int wsOk = WSAStartup(version, &data);
	if (wsOk != 0)
	{
		// Not ok! Get out quickly
		cout << "Can't start Winsock! " << wsOk;
		return;
	}

	////////////////////////////////////////////////////////////
	// CONNECT TO THE SERVER
	////////////////////////////////////////////////////////////

	// Create a hint structure for the server
	sockaddr_in server;
	server.sin_family = AF_INET; // AF_INET = IPv4 addresses
	server.sin_port = htons(54000); // Little to big endian conversion
	inet_pton(AF_INET, "192.168.15.16", &server.sin_addr); // Convert from string to byte array

	// Socket creation, note that the socket type is datagram
	SOCKET out = socket(AF_INET, SOCK_DGRAM, 0);
	int serverleght = sizeof(server);
	char buf[1024];
	// Write out to that socket
//	string s = "asdasd";
	char s[64];
	
	while (1) {
//	AQUI E VERIFICADO QUAL TECLA ESTA APERTADA OU NÃƒO
	// 0	
	if (GetAsyncKeyState(0x30)) {buf[0] = 1;}else {buf[0] = 0;}
	// 1
	if (GetAsyncKeyState(0x31)) { buf[1] = 1; }else { buf[1] = 0; }
	// 2
	if (GetAsyncKeyState(0x32)) { buf[2] = 1; }
	else { buf[2] = 0; }
	// 3
	if (GetAsyncKeyState(0x33)) { buf[3] = 1; }
	else { buf[3] = 0; }
	// 4
	if (GetAsyncKeyState(0x34)) { buf[4] = 1; }
	else { buf[4] = 0; }
	// 5
	if (GetAsyncKeyState(0x35)) { buf[5] = 1; }
	else { buf[5] = 0; }
	// 6
	if (GetAsyncKeyState(0x36)) { buf[6] = 1; }
	else { buf[6] = 0; }
	//7
	if (GetAsyncKeyState(0x37)) { buf[7] = 1; }
	else { buf[7] = 0; }
	// 8
	if (GetAsyncKeyState(0x38)) { buf[8] = 1; }
	else { buf[8] = 0; }
	// 9
	if (GetAsyncKeyState(0x39)) { buf[9] = 1; }
	else { buf[9] = 0; }
	// a
	if (GetAsyncKeyState(0x41)) { buf[10] = 1; }
	else { buf[10] = 0; }
	//
	if (GetAsyncKeyState(0x42)) { buf[11] = 1; }
	else { buf[11] = 0; }
	//
	if (GetAsyncKeyState(0x43)) { buf[12] = 1; }
	else { buf[12] = 0; }
	//
	if (GetAsyncKeyState(0x44)) { buf[13] = 1; }
	else { buf[13] = 0; }
	//
	if (GetAsyncKeyState(0x45)) { buf[14] = 1; }
	else { buf[14] = 0; }
	//
	if (GetAsyncKeyState(0x46)) { buf[15] = 1; }
	else { buf[15] = 0; }
	//
	if (GetAsyncKeyState(0x47)) { buf[16] = 1; }
	else { buf[16] = 0; }
	//
	if (GetAsyncKeyState(0x48)) { buf[17] = 1; }
	else { buf[17] = 0; }
	//
	if (GetAsyncKeyState(0x49)) { buf[18] = 1; }
	else { buf[18] = 0; }
	//
	if (GetAsyncKeyState(0x4A)) { buf[19] = 1; }
	else { buf[19] = 0; }
	//
	if (GetAsyncKeyState(0x4B)) { buf[20] = 1; }
	else { buf[20] = 0; }
	//
	if (GetAsyncKeyState(0x4C)) { buf[21] = 1; }
	else { buf[21] = 0; }
	//
	if (GetAsyncKeyState(0x4D)) { buf[22] = 1; }
	else { buf[22] = 0; }
	//
	if (GetAsyncKeyState(0x4E)) { buf[23] = 1; }
	else { buf[23] = 0; }
	//
	if (GetAsyncKeyState(0x4F)) { buf[24] = 1; }
	else { buf[24] = 0; }
	//
	if (GetAsyncKeyState(0x50)) { buf[25] = 1; }
	else { buf[25] = 0; }
	//
	if (GetAsyncKeyState(0x51)) { buf[26] = 1; }
	else { buf[26] = 0; }
	//
	if (GetAsyncKeyState(0x52)) { buf[27] = 1; }
	else { buf[27] = 0; }
	//
	if (GetAsyncKeyState(0x53)) { buf[28] = 1; }
	else { buf[28] = 0; }
	//
	if (GetAsyncKeyState(0x54)) { buf[29] = 1; }
	else { buf[29] = 0; }
	//
	if (GetAsyncKeyState(0x55)) { buf[30] = 1; }
	else { buf[30] = 0; }
	//
	if (GetAsyncKeyState(0x56)) { buf[31] = 1; }
	else { buf[31] = 0; }
	//
	if (GetAsyncKeyState(0x57)) { buf[32] = 1; }
	else { buf[32] = 0; }
	//
	if (GetAsyncKeyState(0x58)) { buf[33] = 1; }
	else { buf[33] = 0; }
	//
	if (GetAsyncKeyState(0x59)) { buf[34] = 1; }
	else { buf[34] = 0; }
	//
	if (GetAsyncKeyState(0x5A)) { buf[35] = 1; }
	else { buf[35] = 0; }
	//
	if (GetAsyncKeyState(0x10)) { buf[36] = 1; }
	else { buf[36] = 0; }
	//
	if (GetAsyncKeyState(0x11)) { buf[37] = 1; }
	else { buf[37] = 0; }
	//
	if (GetAsyncKeyState(0x20)) { buf[38] = 1; }
	else { buf[38] = 0; }
	//
	if (GetAsyncKeyState(0x08)) { buf[39] = 1; }
	else { buf[39] = 0; }
	//
	if (GetAsyncKeyState(0x1B)) { buf[40] = 1; }
	else { buf[40] = 0; }
	//
	if (GetAsyncKeyState(0x0D)) { buf[41] = 1; }
	else { buf[41] = 0; }
	//
	if (GetAsyncKeyState(0x01)) { buf[42] = 1; }
	else { buf[42] = 0; }
	//
	if (GetAsyncKeyState(0x02)) { buf[43] = 1; }
	else { buf[43] = 0; }

	int sendOk = sendto(out, s, size(s), 0, (sockaddr*)&server, sizeof(server));
	if (sendOk == SOCKET_ERROR) { cout << "That didn't work! " << WSAGetLastError() << endl; }

	}
	
	// Close the socket
	closesocket(out);

	// Close down Winsock
	WSACleanup();

	//	return 0;
}