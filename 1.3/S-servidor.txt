
#include <iostream>
#include <WS2tcpip.h>
#include <windows.h>

// Include the Winsock library (lib) file
#pragma comment (lib, "ws2_32.lib")

// Saves us from typing std::cout << etc. etc. etc.
using namespace std;






// Main entry point into the server
int main()
{

	////////////////////////////////////////////////////////////
	// INITIALIZE WINSOCK
	////////////////////////////////////////////////////////////

	// Structure to store the WinSock version. This is filled in
	// on the call to WSAStartup()
	WSADATA data;

	// To start WinSock, the required version must be passed to
	// WSAStartup(). This server is going to use WinSock version
	// 2 so I create a word that will store 2 and 2 in hex i.e.
	// 0x0202
	WORD version = MAKEWORD(2, 2);

	// Start WinSock
	int wsOk = WSAStartup(version, &data);
	if (wsOk != 0)
	{
		// Not ok! Get out quickly
		cout << "Can't start Winsock! " << wsOk;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// SOCKET CREATION AND BINDING
	////////////////////////////////////////////////////////////

	// Create a socket, notice that it is a user datagram socket (UDP)
	SOCKET in = socket(AF_INET, SOCK_DGRAM, 0);

	// Create a server hint structure for the server
	sockaddr_in serverHint;
	serverHint.sin_addr.S_un.S_addr = ADDR_ANY; // Us any IP address available on the machine
	serverHint.sin_family = AF_INET; // Address format is IPv4
	serverHint.sin_port = htons(54000); // Convert from little to big endian

	// Try and bind the socket to the IP and port
	if (bind(in, (sockaddr*)&serverHint, sizeof(serverHint)) == SOCKET_ERROR)
	{
		cout << "Can't bind socket! " << WSAGetLastError() << endl;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// MAIN LOOP SETUP AND ENTRY
	////////////////////////////////////////////////////////////

	sockaddr_in client; // Use to hold the client information (port / ip address)
	int clientLength = sizeof(client); // The size of the client information
	int a = 0; int b = 0; long long int dado0 = 0;
	char buf[1930];
	ZeroMemory(&client, clientLength); // Clear the client structure
	ZeroMemory(buf, 1930); // Clear the receive buffer

	// Wait for message
	int bytesIn = recvfrom(in, buf, 1930, 0, (sockaddr*)&client, &clientLength);
	if (bytesIn == SOCKET_ERROR)
	{
		cout << "Error receiving from client " << WSAGetLastError() << endl;
		
	}
	
	// Display message and client info
	char clientIp[256]; // Create enough space to convert the address byte array
	ZeroMemory(clientIp, 256); // to string of characters
	// Display the message / who sent it
	cout << "Message recv from " << clientIp << " : " << buf << endl;
	// Enter a loop

	unsigned char* lpPixels;
	char* pass;
	pass =  (char*)malloc(5760 * sizeof(char));
	int nScreenWidth = GetSystemMetrics(SM_CXSCREEN);
	int nScreenHeight = GetSystemMetrics(SM_CYSCREEN);

	BITMAPINFO MyBMInfo = { 0 };
	MyBMInfo.bmiHeader.biSize = sizeof(MyBMInfo.bmiHeader);
	MyBMInfo.bmiHeader.biWidth = nScreenWidth;
	MyBMInfo.bmiHeader.biHeight = -nScreenHeight;
	MyBMInfo.bmiHeader.biPlanes = 1;
	MyBMInfo.bmiHeader.biBitCount = 24;
	MyBMInfo.bmiHeader.biCompression = BI_RGB;
	MyBMInfo.bmiHeader.biSizeImage = 0;
	MyBMInfo.bmiHeader.biXPelsPerMeter = 0;
	MyBMInfo.bmiHeader.biYPelsPerMeter = 0;
	MyBMInfo.bmiHeader.biClrUsed = 0;
	MyBMInfo.bmiHeader.biClrImportant = 0;

	while (true)
	{

		// Create compatible DC, create a compatible bitmap and copy the screen using BitBlt()
		HDC hdcScreen = GetDC(0);

		HDC hdcCompatible = CreateCompatibleDC(hdcScreen);
		HBITMAP hBmp = CreateCompatibleBitmap(hdcScreen, nScreenWidth, nScreenHeight);
		HGDIOBJ hOldBmp = (HGDIOBJ)SelectObject(hdcCompatible, hBmp);

		BOOL bOK = BitBlt(hdcCompatible, 0, 0, nScreenWidth, nScreenHeight, hdcScreen, 0, 0, SRCCOPY | CAPTUREBLT);

		SelectObject(hdcCompatible, hOldBmp); // always select the previously selected object once done
		// Get the BITMAPINFO structure from the bitmap
		GetDIBits(hdcScreen, hBmp, 0, 0, NULL, &MyBMInfo, DIB_RGB_COLORS);

		// create the bitmap buffer
		lpPixels = new unsigned char[MyBMInfo.bmiHeader.biSizeImage];

		MyBMInfo.bmiHeader.biCompression = BI_RGB;
		MyBMInfo.bmiHeader.biBitCount = 24;

		// get the actual bitmap buffer
		GetDIBits(hdcScreen, hBmp, 0, -MyBMInfo.bmiHeader.biHeight, (LPVOID)lpPixels, &MyBMInfo, DIB_RGB_COLORS);

		
		long long int dado101 = 0;
		
		while (a != 1078) {
			while (b != 5760) {
				pass[b] = lpPixels[dado101];
			//	cout << (int)pass[b] << "    " << (int)lpPixels[b] << endl; Sleep(1000);
				b++; dado101++;
			}b = 0;
			//	cout << pass; Sleep(10000);
			int sendOk = sendto(in, pass, 5760 * sizeof(char), 0, (sockaddr*)&client, sizeof(client));
			a++; cout << "enviando" << endl;
			Sleep(10);
		}dado101 = 0;
			Sleep(10000);
			a = 0;
			WSACleanup();
			ReleaseDC(0, hdcScreen);
			ReleaseDC(0, hdcCompatible);
			DeleteDC(hdcCompatible);
			DeleteDC(hdcScreen);
			DeleteObject(hBmp);
			DeleteObject(hOldBmp);
		}
	

	// Close socket
	closesocket(in);

	// Shutdown winsock
	WSACleanup();

	



}