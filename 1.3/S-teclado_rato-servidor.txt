
#include <iostream>
#include <WS2tcpip.h>
#include <windows.h>


using namespace std;


#pragma comment (lib, "ws2_32.lib")

// Main entry point into the server
int main()
{
	//	HANDLE thread = CreateThread(NULL, 0, ThreadFunc, NULL, 0, NULL);
		////////////////////////////////////////////////////////////
		// INITIALIZE WINSOCK
		////////////////////////////////////////////////////////////

		// Structure to store the WinSock version. This is filled in
		// on the call to WSAStartup()
	WSADATA data;

	// To start WinSock, the required version must be passed to
	// WSAStartup(). This server is going to use WinSock version
	// 2 so I create a word that will store 2 and 2 in hex i.e.
	// 0x0202
	WORD version = MAKEWORD(2, 2);

	// Start WinSock
	int wsOk = WSAStartup(version, &data);
	if (wsOk != 0)
	{
		// Not ok! Get out quickly
		cout << "Can't start Winsock! " << wsOk;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// SOCKET CREATION AND BINDING
	////////////////////////////////////////////////////////////

	// Create a socket, notice that it is a user datagram socket (UDP)
	SOCKET in = socket(AF_INET, SOCK_DGRAM, 0);

	// Create a server hint structure for the server
	sockaddr_in serverHint;
	serverHint.sin_addr.S_un.S_addr = ADDR_ANY; // Us any IP address available on the machine
	serverHint.sin_family = AF_INET; // Address format is IPv4
	serverHint.sin_port = htons(54000); // Convert from little to big endian

	// Try and bind the socket to the IP and port
	if (bind(in, (sockaddr*)&serverHint, sizeof(serverHint)) == SOCKET_ERROR)
	{
		cout << "Can't bind socket! " << WSAGetLastError() << endl;
		return 0;
	}

	////////////////////////////////////////////////////////////
	// MAIN LOOP SETUP AND ENTRY
	////////////////////////////////////////////////////////////

	sockaddr_in client; // Use to hold the client information (port / ip address)
	int clientLength = sizeof(client); // The size of the client information

	char buf[64];

	

//	string s = "asdasd";
//	int sendOk = sendto(in, s.c_str(), s.size() + 1, 0, (sockaddr*)&client, sizeof(client));

	// Enter a loop
	while (true)
	{
		ZeroMemory(&client, clientLength); // Clear the client structure
		ZeroMemory(buf, 64); // Clear the receive buffer

		// Wait for message
		int bytesIn = recvfrom(in, buf, 64, 0, (sockaddr*)&client, &clientLength);
		if (bytesIn == SOCKET_ERROR)
		{
			cout << "Error receiving from client " << WSAGetLastError() << endl;
			continue;
		}
//=========================================================================================================
//        VERIFICA QUAIS TECLAS ESTÃO UP E DON	W
//=========================================================================================================
		// 0
		if (buf[0] == 1) {keybd_event(0x30,0x01,KEYEVENTF_EXTENDEDKEY | 0,0);}else{keybd_event(0x30,0x01,KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP,0);}
		// 1
		if (buf[1] == 1) { keybd_event(0x31, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x31, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 2
		if (buf[2] == 1) { keybd_event(0x32, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x32, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 3
		if (buf[3] == 1) { keybd_event(0x33, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x33, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 4
		if (buf[4] == 1) { keybd_event(0x34, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x34, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 5
		if (buf[5] == 1) { keybd_event(0x35, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x35, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 6
		if (buf[6] == 1) { keybd_event(0x36, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x36, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 7
		if (buf[7] == 1) { keybd_event(0x37, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x37, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 8
		if (buf[8] == 1) { keybd_event(0x38, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x38, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// 9
		if (buf[9] == 1) { keybd_event(0x39, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x39, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// A 
		if (buf[10] == 1) { keybd_event(0x41, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x41, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// B
		if (buf[11] == 1) { keybd_event(0x42, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x42, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// C
		if (buf[12] == 1) { keybd_event(0x43, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x43, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// D
		if (buf[13] == 1) { keybd_event(0x44, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x44, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// E
		if (buf[14] == 1) { keybd_event(0x45, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x45, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// F
		if (buf[15] == 1) { keybd_event(0x46, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x46, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// G
		if (buf[16] == 1) { keybd_event(0x47, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x47, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// H
		if (buf[17] == 1) { keybd_event(0x48, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x48, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// I
		if (buf[18] == 1) { keybd_event(0x49, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x49, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// J
		if (buf[19] == 1) { keybd_event(0x4A, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4A, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// K
		if (buf[20] == 1) { keybd_event(0x4B, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4B, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// L
		if (buf[21] == 1) { keybd_event(0x4C, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4C, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// M
		if (buf[22] == 1) { keybd_event(0x4D, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4D, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// N
		if (buf[23] == 1) { keybd_event(0x4E, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4E, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// O
		if (buf[24] == 1) { keybd_event(0x4F, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x4F, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// P
		if (buf[25] == 1) { keybd_event(0x50, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x50, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// Q
		if (buf[26] == 1) { keybd_event(0x51, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x51, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// R
		if (buf[27] == 1) { keybd_event(0x52, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x52, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// S
		if (buf[28] == 1) { keybd_event(0x53, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x53, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// T
		if (buf[29] == 1) { keybd_event(0x54, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x54, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// U
		if (buf[30] == 1) { keybd_event(0x55, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x55, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// V
		if (buf[31] == 1) { keybd_event(0x56, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x56, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// W
		if (buf[32] == 1) { keybd_event(0x57, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x57, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// X
		if (buf[33] == 1) { keybd_event(0x58, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x58, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// Y
		if (buf[34] == 1) { keybd_event(0x59, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x59, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// Z
		if (buf[35] == 1) { keybd_event(0x5A, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x5A, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// shift
		if (buf[36] == 1) { keybd_event(0x10, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x10, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// control 
		if (buf[37] == 1) { keybd_event(0x11, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x11, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// spaço
		if (buf[38] == 1) { keybd_event(0x20, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x20, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// backspace
		if (buf[39] == 1) { keybd_event(0x08, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x08, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// esc
		if (buf[40] == 1) { keybd_event(0x1B, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x1B, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// enter 
		if (buf[41] == 1) { keybd_event(0x0D, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x0D, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// mause esquerdo
		if (buf[42] == 1) { keybd_event(0x01, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x01, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }
		// mause direita 
		if (buf[43] == 1) { keybd_event(0x02, 0x01, KEYEVENTF_EXTENDEDKEY | 0, 0); }else { keybd_event(0x02, 0x01, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }

	}

	// Close socket
	closesocket(in);

	// Shutdown winsock
	WSACleanup();





}